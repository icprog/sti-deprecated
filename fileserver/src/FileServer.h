// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __FileServer_hh__
#define __FileServer_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_FileServer
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_FileServer
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_FileServer
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Remote_File_Server

_CORBA_MODULE_BEG

  struct TFile {
    typedef _CORBA_ConstrType_Variable_Var<TFile> _var_type;

    
    ::CORBA::String_member filename;

    ::CORBA::Boolean exists;

    ::CORBA::Boolean isDirectory;

    ::CORBA::Boolean isHidden;

    ::CORBA::ULongLong lastModified;

    ::CORBA::ULong length;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef TFile::_var_type TFile_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< TFile,TFile_var > TFile_out;

  class TFileSeq_var;

  class TFileSeq : public _CORBA_Unbounded_Sequence< TFile >  {
  public:
    typedef TFileSeq_var _var_type;
    inline TFileSeq() {}
    inline TFileSeq(const TFileSeq& _s)
      : _CORBA_Unbounded_Sequence< TFile > (_s) {}

    inline TFileSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< TFile > (_max) {}
    inline TFileSeq(_CORBA_ULong _max, _CORBA_ULong _len, TFile* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< TFile > (_max, _len, _val, _rel) {}

  

    inline TFileSeq& operator = (const TFileSeq& _s) {
      _CORBA_Unbounded_Sequence< TFile > ::operator=(_s);
      return *this;
    }
  };

  class TFileSeq_out;

  class TFileSeq_var {
  public:
    inline TFileSeq_var() : _pd_seq(0) {}
    inline TFileSeq_var(TFileSeq* _s) : _pd_seq(_s) {}
    inline TFileSeq_var(const TFileSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new TFileSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~TFileSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline TFileSeq_var& operator = (TFileSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline TFileSeq_var& operator = (const TFileSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new TFileSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline TFile& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline TFileSeq* operator -> () { return _pd_seq; }
    inline const TFileSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator TFileSeq& () const { return *_pd_seq; }
#else
    inline operator const TFileSeq& () const { return *_pd_seq; }
    inline operator TFileSeq& () { return *_pd_seq; }
#endif
      
    inline const TFileSeq& in() const { return *_pd_seq; }
    inline TFileSeq&       inout()    { return *_pd_seq; }
    inline TFileSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline TFileSeq* _retn() { TFileSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class TFileSeq_out;
    
  private:
    TFileSeq* _pd_seq;
  };

  class TFileSeq_out {
  public:
    inline TFileSeq_out(TFileSeq*& _s) : _data(_s) { _data = 0; }
    inline TFileSeq_out(TFileSeq_var& _s)
      : _data(_s._pd_seq) { _s = (TFileSeq*) 0; }
    inline TFileSeq_out(const TFileSeq_out& _s) : _data(_s._data) {}
    inline TFileSeq_out& operator = (const TFileSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline TFileSeq_out& operator = (TFileSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator TFileSeq*&()  { return _data; }
    inline TFileSeq*& ptr()       { return _data; }
    inline TFileSeq* operator->() { return _data; }

    inline TFile& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    TFileSeq*& _data;

  private:
    TFileSeq_out();
    TFileSeq_out& operator=(const TFileSeq_var&);
  };

#ifndef __Remote__File__Server_mFileServer__
#define __Remote__File__Server_mFileServer__

  class FileServer;
  class _objref_FileServer;
  class _impl_FileServer;
  
  typedef _objref_FileServer* FileServer_ptr;
  typedef FileServer_ptr FileServerRef;

  class FileServer_Helper {
  public:
    typedef FileServer_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_FileServer, FileServer_Helper> FileServer_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_FileServer,FileServer_Helper > FileServer_out;

#endif

  // interface FileServer
  class FileServer {
  public:
    // Declarations for this interface type.
    typedef FileServer_ptr _ptr_type;
    typedef FileServer_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_FileServer :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Boolean exists(const char* file);
    ::CORBA::Boolean isFile(const char* file);
    ::CORBA::Boolean isDirectory(const char* file);
    ::CORBA::Boolean isAbsolute(const char* path);
    ::CORBA::Boolean createNewFolder(const char* containingDir, const char* filename);
    TFileSeq* getFiles(const char* dir);
    TFile* getParentFile(const TFile& child);
    char* normalize(const char* path);
    char* canonicalize(const char* path);
    char* getSeparator();
    char* getAbsolutePath(const char* path);
    ::CORBA::LongLong getFileLength(const char* path);
    ::CORBA::LongLong getLastWriteTime(const char* path);
    ::CORBA::Boolean isReadOnly(const char* path);
    char* readData(const char* path);
    ::CORBA::Boolean writeData(const char* path, const char* data);
    char* homeDirectory();

    inline _objref_FileServer()  { _PR_setobj(0); }  // nil
    _objref_FileServer(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_FileServer();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_FileServer(const _objref_FileServer&);
    _objref_FileServer& operator = (const _objref_FileServer&);
    // not implemented

    friend class FileServer;
  };

  class _pof_FileServer : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_FileServer() : _OMNI_NS(proxyObjectFactory)(FileServer::_PD_repoId) {}
    virtual ~_pof_FileServer();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_FileServer :
    public virtual omniServant
  {
  public:
    virtual ~_impl_FileServer();

    virtual ::CORBA::Boolean exists(const char* file) = 0;
    virtual ::CORBA::Boolean isFile(const char* file) = 0;
    virtual ::CORBA::Boolean isDirectory(const char* file) = 0;
    virtual ::CORBA::Boolean isAbsolute(const char* path) = 0;
    virtual ::CORBA::Boolean createNewFolder(const char* containingDir, const char* filename) = 0;
    virtual TFileSeq* getFiles(const char* dir) = 0;
    virtual TFile* getParentFile(const TFile& child) = 0;
    virtual char* normalize(const char* path) = 0;
    virtual char* canonicalize(const char* path) = 0;
    virtual char* getSeparator() = 0;
    virtual char* getAbsolutePath(const char* path) = 0;
    virtual ::CORBA::LongLong getFileLength(const char* path) = 0;
    virtual ::CORBA::LongLong getLastWriteTime(const char* path) = 0;
    virtual ::CORBA::Boolean isReadOnly(const char* path) = 0;
    virtual char* readData(const char* path) = 0;
    virtual ::CORBA::Boolean writeData(const char* path, const char* data) = 0;
    virtual char* homeDirectory() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_Remote_File_Server
_CORBA_MODULE_BEG

  class FileServer :
    public virtual Remote_File_Server::_impl_FileServer,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~FileServer();

    inline ::Remote_File_Server::FileServer_ptr _this() {
      return (::Remote_File_Server::FileServer_ptr) _do_this(::Remote_File_Server::FileServer::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Remote_File_Server
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
Remote_File_Server::FileServer::_marshalObjRef(::Remote_File_Server::FileServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_FileServer
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_FileServer
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_FileServer
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_FileServer
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_FileServer
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_FileServer
#endif

#endif  // __FileServer_hh__

