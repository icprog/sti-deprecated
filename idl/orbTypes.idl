/*! \file orbTypes.idl
*  \author Jason Michael Hogan
*  \brief Interface Definition of the STI CORBA communication data types.
*  \section license License
*
*  Copyright (C) 2009 Jason Hogan <hogan@stanford.edu>\n
*  This file is part of Stanford Timing Interface (STI).
*
*  STI is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  STI is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with STI.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef ORBTYPES_IDL
#define ORBTYPES_IDL

module STI
{

	module Types
	{
		//struct TMeasurementCallback
		//{
		//	boolean isValid;
		//	STI::Server_Device::MeasurementCallback callbackRef;
		//};

		struct TAttribute;
		struct TChannel;
		union  TDataMixed;
		struct TDevice;
		struct TDeviceChannel;
		struct TDeviceEvent;
//		struct TPartnerDeviceEvent;
		struct TEvent;
		struct TFile;
		struct TMeasurement;
		struct TOverwritten;
		struct TPartner;
		struct TPicture;
		struct TPosition;
		struct TRow;
		struct TVariable;
		union  TValMixed;
		union  TVarMixed;
		struct TTag;

		//Sequences
		typedef sequence<TTag>                TTagSeq;
		//typedef sequence<TApplication>      TApplicationSeq;
		typedef sequence<TAttribute>          TAttributeSeq;
		typedef sequence<TChannel>            TChannelSeq;
		typedef sequence<TDataMixed>          TDataMixedSeq;
		typedef sequence<TDevice>             TDeviceSeq;
		typedef sequence<TDeviceChannel>      TDeviceChannelSeq;
		typedef sequence<TDeviceEvent>        TDeviceEventSeq;
//		typedef sequence<TPartnerDeviceEvent> TPartnerDeviceEventSeq;
		typedef sequence<TEvent>              TEventSeq;
		typedef sequence<TMeasurement>        TMeasurementSeq;    //List over measurements of one channel
		typedef sequence<octet>               TOctetSeq;
		typedef sequence<TOverwritten>        TOverwrittenSeq;
		typedef sequence<TPartner>            TPartnerSeq;
		typedef sequence<TRow>                TRowSeq;
		typedef sequence<unsigned short>      TshortSeq;	
		typedef sequence<string>              TStringSeq;
		typedef sequence<TValMixed>           TValMixedSeq;
		typedef sequence<TVariable>           TVariableSeq;
		typedef sequence<TVarMixed>           TVarMixedSeq;


		// Enums
		enum TChannelType {Output, Input, BiDirectional, Unknown};
		enum TMessageType {LoadingError, PlayingError, DeviceError};
		enum TStatusLevel {LevelStopped, LevelRunning, LevelPaused, LevelError, LevelParsing, LevelParsed, LevelUnparsed };
		enum TType        {TypeNumber, TypeString, TypeChannel, TypeList, TypeObject};
		enum DeviceStatus { EventsEmpty, EventsLoading, EventsLoaded, PreparingToPlay, Playing, Paused };
		enum TData        {DataBoolean, DataOctet, DataLong, DataDouble, DataString, DataPicture, DataVector, DataFile, DataNone};
		enum TValue       {ValueNumber, ValueString, ValueVector, ValueNone};


		//These types must be defined first before others can use them

		interface TNetworkFile
		{
			readonly attribute string fileName;
			readonly attribute long length;
			boolean getBytes(in long startByte, in long numBytes, out TOctetSeq bytes);
			boolean deleteRemoteFile();
		};

		typedef sequence<TNetworkFile> TNetworkFileSeq;

		struct TLogFile
		{
			TNetworkFile logFile;
			long startTime;
			long endTime;
		};

		typedef sequence<TLogFile> TLogFileSeq;

		struct TDevice {
			string          deviceName;
			string          address;
			unsigned short  moduleNum;
			string          deviceID;
			string          deviceContext;    // For registering with NameService
		};
		
		struct TFile {
			string fileName;
			string fileServerAddress;
			string fileServerDirectory;
			string description;
			TNetworkFile networkFile;
		};

		struct TPartner {
			string partnerDeviceID;

			string deviceName;
			string ipAddress;
			unsigned short moduleNum;

			boolean isRequired;
			boolean isEventTarget;
			boolean isMutual;
			boolean isRegistered;
		};

		struct TPicture {
			unsigned short rowLength;
			TshortSeq      pixels;    //Concatenation of rows (starting in the lower left)
		};

		struct TPosition {
			unsigned short file;  //References parser.files
			unsigned long  line;
		};

		struct TDevicePosition {
			string        file;
			unsigned long line;
		};

		union TValMixed switch(TValue) {
		case ValueNumber    : double  number;
		case ValueString    : string  stringVal;
		case ValueVector    : TValMixedSeq vector;
		case ValueNone      : boolean emptyValue;
		};
		
		
		union TDataMixed switch(TData) {
		case DataBoolean : boolean       booleanVal;
		case DataOctet	 : octet		 octetVal;
		case DataLong    : long          longVal;
		case DataDouble  : double        doubleVal;
		case DataString  : string        stringVal;
		case DataPicture : TPicture      picture;
		case DataVector  : TDataMixedSeq vector;
		case DataFile    : TFile         file;
		case DataNone    : boolean       outVal;
		};


		union TVarMixed switch(TType) {
		case TypeNumber : double         number;
		case TypeString : string         stringVal;
		case TypeChannel: unsigned short channel;   //References parser.channels
		case TypeList   : TVarMixedSeq   list;
		case TypeObject : string         objectVal;
		};

		//The following composite types use some of the above types

		struct TAttribute {
			string key;
			string value;
			TStringSeq values;
		};

		struct TChannel {
			TDevice          device;
			unsigned short   channel;
			TChannelType     type;
			// Types that this channel expects
			TData            inputType;
			TValue           outputType;
			string           channelName;
		};


		struct TDeviceChannel {
			unsigned short channel;
			TChannelType   type;
			// Types that this channel expects
			TData          inputType;
			TValue         outputType;
			string         channelName;
		};



		struct TEvent {
			unsigned short channel;   //References Parser.channels
			double         time;
			TValMixed      value;
			TPosition      pos;
			boolean        isMeasurementEvent;
			string         description;

			//for showing formulas
			//	string         rawTime;
			//	string		   rawChannel;
			//	string         rawValue;
		};

		struct TTag
		{
			string         name;
			TPosition      pos;
			double         time;
		};

		struct TExpRunInfo {
			string filename;
			string description;		//default is the description variable
			string serverBaseDirectory;

			boolean isSequenceMember;
			string sequenceRelativePath;	//directory and filename:  ../mySequence.xml
		};

		struct TExpSequenceInfo {
			string filename;
			string sequenceDescription;
			string serverBaseDirectory;
			string trialFilenameBase;
		};

		struct TLabeledData {
			string label;
			TDataMixed data;
		};

		struct TMeasurement {
			unsigned short channel;   //== STI::Types::TChannel.channel
			double         time;
			TDataMixed     data;
			string         description;
		};

		struct TOverwritten {
			string name;
			string value;
		};

		struct TRow {
			unsigned long row;
			TStringSeq val;
			boolean    done;
		};

		struct TStatus {
			TStatusLevel   level;
			double         curTime;
			unsigned long  curEvent;
			unsigned short curCycle;
		};

		struct TVariable {
			string    name;
			TVarMixed value;
			TPosition pos;
		};

	};

	module Server_Device
	{
		struct TNetworkDynamicValueEvent
		{
			STI::Types::TValMixed value;
		};

		interface DynamicValueLink;
		interface DynamicValueLink
		{
			void addLink(in DynamicValueLink link);
			void unLink();
			void refreshLinkedValue(in TNetworkDynamicValueEvent evt);
		};

		interface TMeasurementCallback
		{
			void returnResult(in STI::Types::TMeasurement measurement);
		};
	};


	module Types
	{
		
		struct TDeviceEvent {
			unsigned short channel;   //== STI::Types::TChannel.channel
			double         time;
			TValMixed      value;
			TDevicePosition      pos;
			unsigned long  eventNum;
			boolean        isMeasurementEvent;
			string         description;
			string         channelName;

			boolean useCallback;
			STI::Server_Device::TMeasurementCallback callbackRef;

			boolean hasDynamicValue;
			STI::Server_Device::DynamicValueLink dynamicValueRef;

		//	STI::Server_Device::TMeasurementCallback measCallback;
		};
	};

};

#endif

