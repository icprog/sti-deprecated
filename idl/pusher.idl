/*! \file pusher.idl
 *  \author Jason Michael Hogan
 *  \brief CORBA Interface Definition for the STI Pusher.
 *  \section license License
 *
 *  Copyright (C) 2010 Jason Hogan <hogan@stanford.edu>\n
 *  This file is part of Stanford Timing Interface (STI).
 *
 *  STI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  STI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with STI.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef PUSHER_IDL
#define PUSHER_IDL

#include "orbTypes.idl"

module STI
{
module Pusher
{
	interface ServerCallback;

	//Pusher event enums
	enum ControllerEventType { ControlRequest, ControlTaken };
	enum DeviceRefreshEventType { RefreshDeviceList, RefreshDevice, RefreshAttributes, RefreshChannels, DeviceErrorStream };
	enum FileEventType { MainFileSelection, FileLocked, FileChanged };
	enum MessageType { DeviceMessage };
	enum ServerState { EventsEmpty, PreparingEvents, EventsReady, RequestingPlay, PlayingEvents, Paused, Waiting };

	//Pusher event types
	struct TControllerEvent
	{
		ControllerEventType type;
		string otherClientName;
		string otherClientIPAddress;
	};

	struct TDeviceDataEvent 
	{
		string deviceID;
		string dataLabel;
	};

	struct TDeviceRefreshEvent
	{
		DeviceRefreshEventType type;
		string deviceID;
		string errorMessage;
	};

	struct TFileEvent
	{
		FileEventType type;
		Types::TFile file;
	};

	struct TMessageEvent
	{
		MessageType type;
		string message;
	};

	struct TParseEvent
	{
		long numberEvents;
		long numberVariables;
	};

	struct TPingEvent
	{
		ServerCallback callBack;
		boolean sleep;
	};

	struct TStatusEvent
	{
		ServerState state;
	};
		

	//server side; unique to each client refresher
	interface ServerCallback
	{
		void pingServer();
		void disconnectFromServer();
	};

	//client-side servant
	interface ServerEventHandler
	{
		void pushPingEvent(in TPingEvent event);
		void pushStatusEvent(in TStatusEvent event);
		void pushMessageEvent(in TMessageEvent event);
		void pushParseEvent(in TParseEvent event);
		void pushFileEvent(in TFileEvent event);
		void pushControllerEvent(in TControllerEvent event);
		void pushDeviceEvent(in TDeviceRefreshEvent event);
		void pushDeviceDataEvent(in TDeviceDataEvent event);
	};

	//server-side servant
	interface ServerEventPusher
	{
		void addEventHandler(in ServerEventHandler handler);

		void pushPingEvent(in TPingEvent event);
		void pushStatusEvent(in TStatusEvent event);
		void pushMessageEvent(in TMessageEvent event);
		void pushParseEvent(in TParseEvent event);
		void pushFileEvent(in TFileEvent event);
		void pushControllerEvent(in TControllerEvent event);
		void pushDeviceEvent(in TDeviceRefreshEvent event);
		void pushDeviceDataEvent(in TDeviceDataEvent event);
	};


};

};

#endif

