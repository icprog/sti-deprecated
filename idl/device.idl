/*! \file
 *  \author Jonathan David Harvey
 *  \author Jason Michael Hogan
 *  \author David Marvin Slaughter Johnson
 *  \author Olaf Mandel
 *  \brief Interface Definition of the Server-Device CORBA communication.
 *  \section license License
 *
 *  Copyright (C) 2008 Jonathan Harvey <harv@stanford.edu>\n
 *  Copyright (C) 2008 Jason Hogan <hogan@stanford.edu>\n
 *  Copyright (C) 2008 David Johnson <dmsj@stanford.edu>\n
 *  Copyright (C) 2008 Olaf Mandel <mandel@stanford.edu>\n
 *  This file is part of Stanford Timing Interface (STI).
 *
 *  STI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  STI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with STI.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef DEVICE_IDL
#define DEVICE_IDL

#include "orbTypes.idl"
#include "pusher.idl"

module STI
{

module Server_Device
{

	//servant runs on the device
	interface DataLogger
	{
		STI::Types::TLogFileSeq getLogFiles();
		void clearLocalLogFiles();
	};
	interface CommandLine;



    // Device object. (Was "Configure" 2/5/2010)
    interface DeviceConfigure
    {
        // Configurable attributes presented by this device to the server
        readonly attribute STI::Types::TAttributeSeq attributes;
		readonly attribute STI::Types::TDeviceChannelSeq channels;
		readonly attribute STI::Types::TPartnerSeq partners;

	//	boolean initialized

        boolean setAttribute(in string key, in string value);
        string getAttribute(in string key);

		boolean setDeviceChannelName(in short channel, in string name);


        boolean setChannel(in short channel, in STI::Types::TValMixed value);

		void reRegisterWithServer();

		void kill();
		boolean ping();
    };

    // Device object.
    interface DataTransfer
    {
        readonly attribute STI::Types::TMeasurementSeq measurements;	//all the measurements

		STI::Types::TMeasurementSeq getRecentMeasurements(in long startingIndex);

		STI::Types::TLabeledData getData(in string dataLabel);
		boolean ping();
    };

	//DeviceTimingSeqControl
	// Device object. Was DeviceControl 2/5/2010
    interface DeviceTimingSeqControl
    {
        boolean transferEvents(in STI::Types::TDeviceEventSeq events, in boolean dryrun);
		
		readonly attribute string  transferErr;
		readonly attribute boolean eventsParsed;
		readonly attribute boolean eventsLoaded;
		readonly attribute boolean eventsPlayed;

        void reset();
		void load();		//load events onto FPGA memory; non-FPGA devices do nothing
		boolean prepareToPlay();
        void play();        //Begin playback of stored events
		void pause();
        void stop();        //Stop current playback

		void waitForStatus(in STI::Types::DeviceStatus status);

		boolean ping();		//server can use to measure network transit time to this device
    };

	interface DeviceBootstrap
	{
		boolean ping();
		STI::Types::TDevice getDevice();

		DeviceTimingSeqControl getDeviceTimingSeqControl();
		DataTransfer getDataTransfer();
		DeviceConfigure getDeviceConfigure();
		CommandLine getCommandLine();
	};

    // Server object.  Devices establish contact with this (global) object
    interface ServerConfigure
    {
        // The attributes required by the server for communication
//        readonly attribute STI::Types::TAttributeSeq attributes;        
//        readonly attribute string serverName;    //human-readable server id info

        // Returns true if registration is successful.
        // Asigns a unique TDevice.deviceID for the device.
        // The device uses the deviceID string to specify its attributes to the server.
        // The TDevice.deviceContext is used to register the device with the NameService.
        // This function (in particular, deviceID generation) MUST be thread safe!
        boolean registerDevice(inout STI::Types::TDevice device, in DeviceBootstrap bootstrap);

        // Tells the server to aquire the device's servants in the unique context .\<deviceID>\
        // The device's servants should be live and available on the NameService before making this call.
        // Since orb->run() must be called from the main thread, the acquisition of the server's
        // ServerConfigure object and the call to activateDevice() should be done from
        // a separate (low priority) thread.
//        boolean activateDevice(in string deviceID);
        boolean removeDevice(in string deviceID);

		//used to generate deviceIDs for partner devices
		string generateDeviceID(in STI::Types::TDevice device);

		void pauseServer(in string deviceID);
		void unpauseServer(in string deviceID);
		
		STI::Pusher::DeviceEventHandler getDeviceEventHandler();

		boolean ping();

    };

	typedef sequence<DeviceTimingSeqControl> DeviceControlSeq;

	//should be renamed Partners
	interface CommandLine
	{
		readonly attribute STI::Types::TStringSeq eventPartnerDevices; //the partners that this device generates event for
		readonly attribute STI::Types::TStringSeq requiredPartnerDevices;
		readonly attribute STI::Types::TStringSeq registeredPartnerDevices;
		readonly attribute STI::Types::TDevice device;

		//executing command line args on partner devices
		string execute(in string args);
        
		//allows devices to set attributes on partner devices
		boolean setAttribute(in string key, in string value);
        string getAttribute(in string key);

		boolean writeChannel(in unsigned short channel, in STI::Types::TValMixed value);
		boolean readChannel(in unsigned short channel, in STI::Types::TValMixed value, out STI::Types::TDataMixed data);	
		//readChannel: 'value' is for (optional) parameters that are needed to make the masurement.  'data' is the result of the measurement

		boolean preparePartnerEvents(in STI::Types::TDeviceEventSeq eventsIn, inout DeviceControlSeq partnerControls, inout STI::Types::TStringSeq antecedentDevices);

		boolean registerPartnerDevice(in CommandLine partnerCmdLine);
		boolean unregisterPartnerDevice(in string deviceID);

		STI::Types::TDeviceEventSeq getPartnerEvents(in string deviceID);

		boolean ping();
	};




};

};

#endif

